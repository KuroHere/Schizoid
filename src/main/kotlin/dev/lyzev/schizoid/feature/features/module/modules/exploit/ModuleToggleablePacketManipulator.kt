/*
 * Copyright (c) 2024. Schizoid
 * All rights reserved.
 */

package dev.lyzev.schizoid.feature.features.module.modules.exploit

import dev.lyzev.api.events.EventListener
import dev.lyzev.api.events.EventSendPacket
import dev.lyzev.api.events.on
import dev.lyzev.api.setting.settings.OptionEnum
import dev.lyzev.api.setting.settings.option
import dev.lyzev.api.setting.settings.slider
import dev.lyzev.api.setting.settings.switch
import dev.lyzev.schizoid.Schizoid
import dev.lyzev.schizoid.feature.features.module.ModuleToggleable
import net.minecraft.network.packet.Packet
import java.util.*
import java.util.concurrent.Executors

object ModuleToggleablePacketManipulator : ModuleToggleable("Packet Manipulator", "Manipulates packets.", category = Category.EXPLOIT), EventListener {

    private val serverbound by switch("Serverbound", "Manipulates serverbound packets.", true)
    private val clientbound by switch("Clientbound", "Manipulates clientbound packets.", true)

    private val method by option("Method", "The method used to manipulate packets.", PacketManipulatorMethod.STATE, PacketManipulatorMethod.entries) { method ->
        method.onEnable()
    }

    val pulsePeriod by slider("Pulse Period", "The period of the pulse method.", 500, 1, 5000, "ms")

    val latencyDelay by slider("Latency Delay", "The delay of the latency method.", 500, 1, 5000, "ms")

    override fun onDisable() = method.onDisable()

    override val shouldHandleEvents: Boolean
        get() = isEnabled

    init {
        on<EventSendPacket> { event ->
            if (serverbound)
                event.isCancelled = method.onSendPacket(event.packet)
        }
    }
}

enum class PacketManipulatorMethod(override val key: String) : OptionEnum, PacketManipulator {
    STATE("State") {

        private val packets = mutableListOf<Packet<*>>()

        override fun onSendPacket(packet: Packet<*>): Boolean {
            packets.add(packet)
            return true
        }

        override fun onEnable() = packets.clear()

        override fun onDisable() = packets.forEach { Schizoid.mc.networkHandler?.sendPacket(it) }
    }, PULSE("Pulse") {

        private val packets = mutableListOf<Packet<*>>()
        private val timerTask = Timer()

        override fun onSendPacket(packet: Packet<*>): Boolean {
            packets.add(packet)
            return true
        }

        override fun onEnable() {
            packets.clear()
            timerTask.scheduleAtFixedRate(object : TimerTask() {
                override fun run() {
                    packets.forEach { Schizoid.mc.networkHandler?.sendPacket(it) }
                    packets.clear()
                }
            }, 0, ModuleToggleablePacketManipulator.pulsePeriod.toLong())
        }

        override fun onDisable() {
            timerTask.cancel()
            packets.forEach { Schizoid.mc.networkHandler?.sendPacket(it) }
        }
    }, LATENCY("Latency") {

        private val cachedThreadPool = Executors.newCachedThreadPool()

        override fun onSendPacket(packet: Packet<*>): Boolean {
            cachedThreadPool.execute {
                Thread.sleep(ModuleToggleablePacketManipulator.latencyDelay.toLong())
                Schizoid.mc.networkHandler?.sendPacket(packet)
            }
            return true
        }

        override fun onEnable() {
        }

        override fun onDisable() {
        }
    }
}

interface PacketManipulator {

    fun onSendPacket(packet: Packet<*>): Boolean

    fun onEnable()

    fun onDisable()
}
